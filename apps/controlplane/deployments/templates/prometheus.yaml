apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: monitoring
    name: monitoring
  name: monitoring

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus-stack
  namespace: argo-cd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  project: default
  source:
    chart: kube-prometheus-stack
    helm:
      values: |
        grafana:
          grafana.ini:
            users:
              viewers_can_edit: true
            auth:
              disable_login_form: true
              disable_signout_menu: true
            auth.anonymous:
              enabled: true
              org_role: Admin
          nodeSelector:
            role: master

        alertmanager:
          enabled: false
        prometheusOperator:
          nodeSelector:
            role: master
        prometheus:
          prometheusSpec:
            storageSpec:
              volumeClaimTemplate:
                spec:
                  storageClassName: local-storage
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 8Gi
            nodeSelector:
              role: master
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 45.19.0
  syncPolicy:
    syncOptions:
      - ServerSideApply=true
      - CreateNamespace=true
    automated:
      prune: true
      selfHeal: true
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: prometheus-pv
  namespace: monitoring
spec:
  capacity:
    storage: 8Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /storage/nvme/prometheus
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - master
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: grafana-oauth-proxy
  namespace: argo-cd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  project: default
  source:
    chart: oauth2-proxy
    helm:
      values: |
        configuration:
          clientID: "grafana"
          clientSecret: "RBfar2G7zvSeLX6dvV9lvEZGs1oYLIfM"
          content: |
            email_domains=["*"]
            client_secret="RBfar2G7zvSeLX6dvV9lvEZGs1oYLIfM"
            client_id="grafana"
            redirect_url="https://grafana.metin.sh/oauth2/callback"
            oidc_issuer_url="https://sso.metin.sh/realms/master"
            provider="oidc"
            provider_display_name="Grafana"

        nodeSelector:
          worker: "true"
        redis:
          enabled: false
    repoURL: https://charts.bitnami.com/bitnami
    targetRevision: "3.7.4"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/auth-url: "http://grafana-oauth-proxy-oauth2-proxy.monitoring.svc.cluster.local/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://grafana.metin.sh/oauth2/start?rd=$escaped_request_uri"
spec:
  rules:
    - host: grafana.metin.sh
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: prometheus-stack-grafana
                port:
                  number: 80
          - pathType: Prefix
            path: "/oauth2"
            backend:
              service:
                name: grafana-oauth-proxy-oauth2-proxy
                port:
                  number: 80