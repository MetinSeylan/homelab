apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: rabbitmq
  namespace: argo-cd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    server: https://kubernetes.default.svc
    namespace: rabbitmq
  project: default
  source:
    chart: rabbitmq
    helm:
      values: |
        auth:
          username: guest
          password: guest
        persistence:
          enabled: true
          existingClaim: rabbitmq-pvc
        nodeSelector:
          role: node2
        metrics:
          enabled: true
          serviceMonitor:
              enabled: true
              labels:
                release: prometheus-stack
    repoURL: https://charts.bitnami.com/bitnami
    targetRevision: "12.0.4"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: rabbitmq-pv
  namespace: rabbitmq
spec:
  capacity:
    storage: 16Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /storage/nvme/rabbitmq
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - node2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-pvc
  namespace: rabbitmq
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
  storageClassName: local-storage
  volumeMode: Filesystem
  volumeName: rabbitmq-pv
  
---

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: rabbitmq-oauth-proxy
  namespace: argo-cd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    server: https://kubernetes.default.svc
    namespace: rabbitmq
  project: default
  source:
    chart: oauth2-proxy
    helm:
      values: |
        configuration:
          clientID: "rabbitmq"
          clientSecret: "17QbZ2RfjtD7fSUzvfFjX4rnyDOynBEa"
          content: |
            email_domains=["*"]
            client_secret="17QbZ2RfjtD7fSUzvfFjX4rnyDOynBEa"
            client_id="rabbitmq"
            redirect_url="https://rabbitmq.metin.sh/oauth2/callback"
            oidc_issuer_url="https://sso.metin.sh/realms/master"
            provider="oidc"
            provider_display_name="rabbitmq"

        nodeSelector:
          role: node2
        redis:
          enabled: false
    repoURL: https://charts.bitnami.com/bitnami
    targetRevision: "3.7.4"
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rabbitmq-ingress
  namespace: rabbitmq
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/auth-url: "http://rabbitmq-oauth-proxy-oauth2-proxy.rabbitmq.svc.cluster.local/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://rabbitmq.metin.sh/oauth2/start?rd=$escaped_request_uri"
spec:
  rules:
    - host: rabbitmq.metin.sh
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: rabbitmq
                port:
                  number: 15672

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rabbitmq-oauth2-ingress
  namespace: rabbitmq
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - host: rabbitmq.metin.sh
      http:
        paths:
          - pathType: Prefix
            path: "/oauth2"
            backend:
              service:
                name: rabbitmq-oauth-proxy-oauth2-proxy
                port:
                  number: 80